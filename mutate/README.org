[[https://github.com/agroce/universalmutator][universalmutator]] is a python program for mutation testing, by Alex Groce et al.

mutate is a command line program which generates mutant source code files.
It does not output a meta-data file describing each mutant,
but it does describe each mutant in its stdout, for example:

#+begin_src 
*** UNIVERSALMUTATOR ***
MUTATING WITH RULES: universal.rules, c.rules, c_like.rules
SKIPPED 129 MUTANTS ONLY CHANGING STRING LITERALS
1821 MUTANTS GENERATED BY RULES
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {
break;...INVALID 
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {
continue;...INVALID 
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain(SEXP x, int nomatch, SEXP table, bool chin, bool chmatchdup) {...INVALID 
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain(SEXP x, SEXP table, bool chin, int nomatch, bool chmatchdup) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.0.c] 
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chmatchdup, bool chin) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.1.c]
...
PROCESSING MUTANT: 159: /*  ==>  /*
break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.721.c] 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(159, '/*\n')
PROCESSING MUTANT: 159: /*  ==>  /*
continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.722.c] 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(159, '/*\n')
PROCESSING MUTANT: 159: /*  ==>  /*/**/...INVALID 
LINE 160: ## Benchmark moved here in v1.12.2 from rbindlist.c APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 161: set.seed(45L) APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 162: x <- sample(letters, 1e6, TRUE) APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 163: y <- sample(letters, 1e7, TRUE) APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 164: system.time(ans0 <- base::pmatch(x,y,0L))           # over 5 minutes as of R 3.5.3 (March 2019) APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 165: system.time(ans1 <- .Call("Cchmatch2_old", x,y,0L)) # 2.40sec  many years old APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 166: system.time(ans2 <- .Call("Cchmatch2", x,y,0L))     # 0.17sec  as of 1.12.0 and in place for several years before that APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 167: system.time(ans3 <- chmatchdup(x,y,0L))             # 0.09sec  from 1.12.2; but goal wasn't speed rather simplified code; e.g. rbindlist.c down from 960 to 360 lines APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 168: identical(ans2,ans3)  # test 2000 APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  +/...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  -/...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  //...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  %/...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  */
break;...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  */
continue;...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  /**/*/...INVALID 
723 VALID MUTANTS
564 INVALID MUTANTS
0 REDUNDANT MUTANTS
Valid Percentage: 56.17715617715618%
#+end_src

Exercise: make a data table with one row for each valid mutant, for example here is one:

#+begin_src 
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain(SEXP x, SEXP table, bool chin, int nomatch, bool chmatchdup) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.0.c] 
#+end_src

above should be parsed to a row with columns:

- line number: 3,
- code before/after mutation (==> is the separator),
- file: chmatch.c,
- mutant number: 0.  

The tricky part is that some valid mutants appear over multiple lines, such as:

#+begin_src 
PROCESSING MUTANT: 159: /*  ==>  /*
continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.722.c] 
#+end_src

Do that for each file in this directory, and you should get a table
with 4500 rows. See if you can reproduce the following numbers for each file:

#+begin_src R
> table(mutant.dt$file)

 chmatch.c       cj.c coalesce.c fastmean.c    fcast.c    fmelt.c 
       723        568       1096        450        577       1086 
#+end_src
