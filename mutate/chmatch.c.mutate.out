*** UNIVERSALMUTATOR ***
MUTATING WITH RULES: universal.rules, c.rules, c_like.rules
SKIPPED 129 MUTANTS ONLY CHANGING STRING LITERALS
1821 MUTANTS GENERATED BY RULES
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {
break;...INVALID 
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {
continue;...INVALID 
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain(SEXP x, int nomatch, SEXP table, bool chin, bool chmatchdup) {...INVALID 
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain(SEXP x, SEXP table, bool chin, int nomatch, bool chmatchdup) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.0.c] 
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chmatchdup, bool chin) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.1.c] 
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  static SEXP chmatchMain( SEXP table,SEXP x, int nomatch, bool chin, bool chmatchdup) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.2.c] 
PROCESSING MUTANT: 3: static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {  ==>  /*static SEXP chmatchMain(SEXP x, SEXP table, int nomatch, bool chin, bool chmatchdup) {*/...INVALID 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (!isString(table) || !isNull(table))...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.3.c] 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (isString(table) && !isNull(table))...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.4.c] 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (!isString(table) && isNull(table))...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.5.c] 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (!isString(table) && !isNull(table))
  break;...INVALID 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (!isString(table) && !isNull(table))
  continue;...INVALID 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    /*if (!isString(table) && !isNull(table))*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.6.c] 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (!(!isString(table) && !isNull(table)))...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.7.c] 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (0==1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.8.c] 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (1==1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.9.c] 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (!isString(table) && (1==1))...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.10.c] 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (!isString(table) && (1==1) ...INVALID 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if ((1==1) && !isNull(table))...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.11.c] 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (!isString((1==1) && !isNull(table))...INVALID 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>   (1==1) && !isNull(table))...INVALID 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    (1==1) && !isNull(table))...INVALID 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (1==1) && !isNull(table))...INVALID 
PROCESSING MUTANT: 4:   if (!isString(table) && !isNull(table))  ==>    if (!isString(table) (1==1) && !isNull(table))...INVALID 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      error(_("table is type '%s' (must be 'character' or NULL)"), type0char(TYPEOF(table)));...INVALID 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      error(_("table is type '%s' (must be 'character' or NULL)"), type1char(TYPEOF(table)));...INVALID 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      error(_("table is type '%s' (must be 'character' or NULL)"), type-1char(TYPEOF(table)));...INVALID 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      error(_("table is type '%s' (must be 'character' or NULL)"), type(2+1)char(TYPEOF(table)));...INVALID 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      error(_("table is type '%s' (must be 'character' or NULL)"), type(2-1)char(TYPEOF(table)));...INVALID 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));
    break;...INVALID 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));
    continue;...INVALID 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      error(_(""), type2char(TYPEOF(table)));...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.12.c] 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      error( type2char(TYPEOF(table,_("table is type '%s' (must be 'character' or NULL)"))));...INVALID 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      error(_( type2char(TYPEOF(table,"table is type '%s' (must be 'character' or NULL)"))));...INVALID 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      error(_("table is type '%s' ( type2char(TYPEOF(table,must be 'character' or NULL)"))));...INVALID 
PROCESSING MUTANT: 5:     error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));  ==>      /*error(_("table is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(table)));*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.13.c] 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    if (chin || chmatchdup)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.14.c] 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    if (chin && chmatchdup)
  break;...INVALID 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    if (chin && chmatchdup)
  continue;...INVALID 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    /*if (chin && chmatchdup)*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.15.c] 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    if (!(chin && chmatchdup))...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.16.c] 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    if (0==1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.17.c] 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    if (1==1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.18.c] 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    if (chin && (1==1))...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.19.c] 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    if (chin && (1==1) ...INVALID 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    if ((1==1) && chmatchdup)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.20.c] 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>   (1==1) && chmatchdup)...INVALID 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    (1==1) && chmatchdup)...INVALID 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    if (1==1) && chmatchdup)...INVALID 
PROCESSING MUTANT: 6:   if (chin && chmatchdup)  ==>    if (chin (1==1) && chmatchdup)...INVALID 
PROCESSING MUTANT: 7:     error(_("Internal error: either chin or chmatchdup should be true not both"));  // # nocov  ==>      error(_("Internal error: either chin or chmatchdup should be true not both"));  // # nocov
    break;...INVALID 
PROCESSING MUTANT: 7:     error(_("Internal error: either chin or chmatchdup should be true not both"));  // # nocov  ==>      error(_("Internal error: either chin or chmatchdup should be true not both"));  // # nocov
    continue;...INVALID 
PROCESSING MUTANT: 7:     error(_("Internal error: either chin or chmatchdup should be true not both"));  // # nocov  ==>      error(_(""));  // # nocov...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.21.c] 
PROCESSING MUTANT: 7:     error(_("Internal error: either chin or chmatchdup should be true not both"));  // # nocov  ==>      /*error(_("Internal error: either chin or chmatchdup should be true not both"));  // # nocov*/...INVALID 
PROCESSING MUTANT: 8:   SEXP sym = NULL;  ==>    SEXP sym = NULL;
  break;...INVALID 
PROCESSING MUTANT: 8:   SEXP sym = NULL;  ==>    SEXP sym = NULL;
  continue;...INVALID 
PROCESSING MUTANT: 8:   SEXP sym = NULL;  ==>    /*SEXP sym = NULL;*/...INVALID 
PROCESSING MUTANT: 9:   const int xlen = length(x);  ==>    const int xlen = length(x);
  break;...INVALID 
PROCESSING MUTANT: 9:   const int xlen = length(x);  ==>    const int xlen = length(x);
  continue;...INVALID 
PROCESSING MUTANT: 9:   const int xlen = length(x);  ==>    /*const int xlen = length(x);*/...INVALID 
PROCESSING MUTANT: 10:   if (TYPEOF(x) == SYMSXP) {  ==>    if (TYPEOF(x) != SYMSXP) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.22.c] 
PROCESSING MUTANT: 10:   if (TYPEOF(x) == SYMSXP) {  ==>    if (TYPEOF(x) <= SYMSXP) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.23.c] 
PROCESSING MUTANT: 10:   if (TYPEOF(x) == SYMSXP) {  ==>    if (TYPEOF(x) >= SYMSXP) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.24.c] 
PROCESSING MUTANT: 10:   if (TYPEOF(x) == SYMSXP) {  ==>    if (TYPEOF(x) > SYMSXP) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.25.c] 
PROCESSING MUTANT: 10:   if (TYPEOF(x) == SYMSXP) {  ==>    if (TYPEOF(x) < SYMSXP) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.26.c] 
PROCESSING MUTANT: 10:   if (TYPEOF(x) == SYMSXP) {  ==>    if (TYPEOF(x) == SYMSXP) {
  break;...INVALID 
PROCESSING MUTANT: 10:   if (TYPEOF(x) == SYMSXP) {  ==>    if (TYPEOF(x) == SYMSXP) {
  continue;...INVALID 
PROCESSING MUTANT: 10:   if (TYPEOF(x) == SYMSXP) {  ==>    /*if (TYPEOF(x) == SYMSXP) {*/...INVALID 
PROCESSING MUTANT: 10:   if (TYPEOF(x) == SYMSXP) {  ==>    if (!(TYPEOF(x) == SYMSXP)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.27.c] 
PROCESSING MUTANT: 10:   if (TYPEOF(x) == SYMSXP) {  ==>    if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.28.c] 
PROCESSING MUTANT: 10:   if (TYPEOF(x) == SYMSXP) {  ==>    if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.29.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen==1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.30.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen<=1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.31.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen>=1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.32.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen>1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.33.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen<1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.34.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen!=0)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.35.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen!=-1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.36.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen!=(1+1))...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.37.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen!=(1-1))...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.38.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen=1)...INVALID 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen!=1)
    break;...INVALID 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (xlen!=1)
    continue;...INVALID 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      /*if (xlen!=1)*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.39.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (!(xlen!=1))...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.40.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (0==1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.41.c] 
PROCESSING MUTANT: 11:     if (xlen!=1)  ==>      if (1==1)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.42.c] 
PROCESSING MUTANT: 12:       error(_("Internal error: length of SYMSXP is %d not 1"), xlen); // # nocov  ==>        error(_("Internal error: length of SYMSXP is %d not 1"), xlen); // # nocov
      break;...INVALID 
PROCESSING MUTANT: 12:       error(_("Internal error: length of SYMSXP is %d not 1"), xlen); // # nocov  ==>        error(_("Internal error: length of SYMSXP is %d not 1"), xlen); // # nocov
      continue;...INVALID 
PROCESSING MUTANT: 12:       error(_("Internal error: length of SYMSXP is %d not 1"), xlen); // # nocov  ==>        error(_(""), xlen); // # nocov...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.43.c] 
PROCESSING MUTANT: 12:       error(_("Internal error: length of SYMSXP is %d not 1"), xlen); // # nocov  ==>        error( xlen,_("Internal error: length of SYMSXP is %d not 1")); // # nocov...INVALID 
PROCESSING MUTANT: 12:       error(_("Internal error: length of SYMSXP is %d not 1"), xlen); // # nocov  ==>        error(_( xlen,"Internal error: length of SYMSXP is %d not 1")); // # nocov...INVALID 
PROCESSING MUTANT: 12:       error(_("Internal error: length of SYMSXP is %d not 1"), xlen); // # nocov  ==>        /*error(_("Internal error: length of SYMSXP is %d not 1"), xlen); // # nocov*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.44.c] 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP +)STRING_PTR(x) and save an alloc for coerce to STRSXP...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.45.c] 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP -)STRING_PTR(x) and save an alloc for coerce to STRSXP...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.46.c] 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP /)STRING_PTR(x) and save an alloc for coerce to STRSXP...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.47.c] 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP %)STRING_PTR(x) and save an alloc for coerce to STRSXP...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.48.c] 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      sym = PRINTNAME(x);  // so we can do &sym to get a length 0 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.49.c] 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      sym = PRINTNAME(x);  // so we can do &sym to get a length -1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.50.c] 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      sym = PRINTNAME(x);  // so we can do &sym to get a length (1+1) (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.51.c] 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      sym = PRINTNAME(x);  // so we can do &sym to get a length (1-1) (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.52.c] 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      sym = PRINTNAME(x);  // so we can do |sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.53.c] 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP
    break;...INVALID 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP
    continue;...INVALID 
PROCESSING MUTANT: 13:     sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP  ==>      /*sym = PRINTNAME(x);  // so we can do &sym to get a length 1 (const SEXP *)STRING_PTR(x) and save an alloc for coerce to STRSXP*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.54.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) || !isSymbol(x) && !isNull(x)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.55.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && !isSymbol(x) || !isNull(x)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.56.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (isString(x) && !isSymbol(x) && !isNull(x)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.57.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && isSymbol(x) && !isNull(x)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.58.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && !isSymbol(x) && isNull(x)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.59.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {
  break;...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {
  continue;...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    /*} else if (!isString(x) && !isSymbol(x) && !isNull(x)) {*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.60.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!(!isString(x) && !isSymbol(x) && !isNull(x))) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.61.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.62.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.63.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    }  if (!isString(x) && !isSymbol(x) && !isNull(x)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.64.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && (1==1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.65.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && !isSymbol(x) && (1==1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.66.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && (1==1) ...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && !isSymbol(x) && (1==1) ...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if ((1==1) && !isNull(x)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.67.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString((1==1) && !isNull(x)) {...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && !isSymbol((1==1) && !isNull(x)) {...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>   (1==1) && !isNull(x)) {...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    (1==1) && !isNull(x)) {...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } (1==1) && !isNull(x)) {...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else (1==1) && !isNull(x)) {...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (1==1) && !isNull(x)) {...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) (1==1) && !isNull(x)) {...INVALID 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && (1==1) && !isNull(x)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.68.c] 
PROCESSING MUTANT: 14:   } else if (!isString(x) && !isSymbol(x) && !isNull(x)) {  ==>    } else if (!isString(x) && !isSymbol(x) (1==1) && !isNull(x)) {...INVALID 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if (chin || !isVectorAtomic(x)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.69.c] 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if (chin && isVectorAtomic(x)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.70.c] 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if (chin && !isVectorAtomic(x)) {
    break;...INVALID 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if (chin && !isVectorAtomic(x)) {
    continue;...INVALID 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      /*if (chin && !isVectorAtomic(x)) {*/...INVALID 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if (!(chin && !isVectorAtomic(x))) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.71.c] 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.72.c] 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.73.c] 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if (chin && (1==1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.74.c] 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if (chin && (1==1) ...INVALID 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if ((1==1) && !isVectorAtomic(x)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.75.c] 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>   (1==1) && !isVectorAtomic(x)) {...INVALID 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>    (1==1) && !isVectorAtomic(x)) {...INVALID 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>     (1==1) && !isVectorAtomic(x)) {...INVALID 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      (1==1) && !isVectorAtomic(x)) {...INVALID 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if (1==1) && !isVectorAtomic(x)) {...INVALID 
PROCESSING MUTANT: 15:     if (chin && !isVectorAtomic(x)) {  ==>      if (chin (1==1) && !isVectorAtomic(x)) {...INVALID 
PROCESSING MUTANT: 16:       return ScalarLogical(FALSE);  ==>        return ScalarLogical(FALSE);
      break;...INVALID 
PROCESSING MUTANT: 16:       return ScalarLogical(FALSE);  ==>        return ScalarLogical(FALSE);
      continue;...INVALID 
PROCESSING MUTANT: 16:       return ScalarLogical(FALSE);  ==>        /*return ScalarLogical(FALSE);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.76.c] 
LINE 17:       // commonly type 'language' returns FALSE here, to make %iscall% simpler; e.g. #1369 results in (function(x) sum(x)) as jsub[[.]] from dcast.data.table APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 18:     } else {  ==>      } else {
    break;...INVALID 
PROCESSING MUTANT: 18:     } else {  ==>      } else {
    continue;...INVALID 
PROCESSING MUTANT: 18:     } else {  ==>      /*} else {*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.77.c] 
PROCESSING MUTANT: 18:     } else {  ==>      }  {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.78.c] 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        error(_("x is type '%s' (must be 'character' or NULL)"), type0char(TYPEOF(x)));...INVALID 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        error(_("x is type '%s' (must be 'character' or NULL)"), type1char(TYPEOF(x)));...INVALID 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        error(_("x is type '%s' (must be 'character' or NULL)"), type-1char(TYPEOF(x)));...INVALID 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        error(_("x is type '%s' (must be 'character' or NULL)"), type(2+1)char(TYPEOF(x)));...INVALID 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        error(_("x is type '%s' (must be 'character' or NULL)"), type(2-1)char(TYPEOF(x)));...INVALID 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));
      break;...INVALID 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));
      continue;...INVALID 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        error(_(""), type2char(TYPEOF(x)));...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.79.c] 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        error( type2char(TYPEOF(x,_("x is type '%s' (must be 'character' or NULL)"))));...INVALID 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        error(_( type2char(TYPEOF(x,"x is type '%s' (must be 'character' or NULL)"))));...INVALID 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        error(_("x is type '%s' ( type2char(TYPEOF(x,must be 'character' or NULL)"))));...INVALID 
PROCESSING MUTANT: 19:       error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));  ==>        /*error(_("x is type '%s' (must be 'character' or NULL)"), type2char(TYPEOF(x)));*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.80.c] 
PROCESSING MUTANT: 20:     }  ==>      }
    break;...INVALID 
PROCESSING MUTANT: 20:     }  ==>      }
    continue;...INVALID 
PROCESSING MUTANT: 21:   }  ==>    }
  break;...INVALID 
PROCESSING MUTANT: 21:   }  ==>    }
  continue;...INVALID 
LINE 22:   // allocations up front before savetl starts in case allocs fail APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 23:   int nprotect=0;  ==>    int nprotect=1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.81.c] 
PROCESSING MUTANT: 23:   int nprotect=0;  ==>    int nprotect=-1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.82.c] 
PROCESSING MUTANT: 23:   int nprotect=0;  ==>    int nprotect=(0+1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.83.c] 
PROCESSING MUTANT: 23:   int nprotect=0;  ==>    int nprotect=(0-1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.84.c] 
PROCESSING MUTANT: 23:   int nprotect=0;  ==>    int nprotect=0;
  break;...INVALID 
PROCESSING MUTANT: 23:   int nprotect=0;  ==>    int nprotect=0;
  continue;...INVALID 
PROCESSING MUTANT: 23:   int nprotect=0;  ==>    /*int nprotect=0;*/...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect-+;...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect+-;...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect*+;...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect+*;...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect/+;...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect+/;...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect%+;...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect+%;...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect--;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.85.c] 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;
  break;...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;
  continue;...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT( xlen,allocVector(chin?LGLSXP:INTSXP)); nprotect++;...INVALID 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    SEXP ans = PROTECT(allocVector( xlen,chin?LGLSXP:INTSXP)); nprotect++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.86.c] 
PROCESSING MUTANT: 24:   SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;  ==>    /*SEXP ans = PROTECT(allocVector(chin?LGLSXP:INTSXP, xlen)); nprotect++;*/...INVALID 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (xlen!=0) { // no need to look at table when x is empty (including null)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.87.c] 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (xlen<=0) { // no need to look at table when x is empty (including null)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.88.c] 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (xlen>=0) { // no need to look at table when x is empty (including null)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.89.c] 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (xlen>0) { // no need to look at table when x is empty (including null)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.90.c] 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (xlen<0) { // no need to look at table when x is empty (including null)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.91.c] 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (xlen==1) { // no need to look at table when x is empty (including null)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.92.c] 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (xlen==-1) { // no need to look at table when x is empty (including null)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.93.c] 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (xlen==(0+1)) { // no need to look at table when x is empty (including null)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.94.c] 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (xlen==(0-1)) { // no need to look at table when x is empty (including null)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.95.c] 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (xlen==0) { // no need to look at table when x is empty (including null)
  break;...INVALID 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (xlen==0) { // no need to look at table when x is empty (including null)
  continue;...INVALID 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    /*if (xlen==0) { // no need to look at table when x is empty (including null)*/...INVALID 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (!(xlen==0) { // no need to look at table when x is empty (including null))...INVALID 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (0==1)...INVALID 
PROCESSING MUTANT: 25:   if (xlen==0) { // no need to look at table when x is empty (including null)  ==>    if (1==1)...INVALID 
PROCESSING MUTANT: 26:     UNPROTECT(nprotect);  ==>      UNPROTECT(nprotect);
    break;...INVALID 
PROCESSING MUTANT: 26:     UNPROTECT(nprotect);  ==>      UNPROTECT(nprotect);
    continue;...INVALID 
PROCESSING MUTANT: 26:     UNPROTECT(nprotect);  ==>      /*UNPROTECT(nprotect);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.96.c] 
PROCESSING MUTANT: 27:     return ans;  ==>      return ans;
    break;...INVALID 
PROCESSING MUTANT: 27:     return ans;  ==>      return ans;
    continue;...INVALID 
PROCESSING MUTANT: 27:     return ans;  ==>      /*return ans;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.97.c] 
PROCESSING MUTANT: 28:   }  ==>    }
  break;...INVALID 
PROCESSING MUTANT: 28:   }  ==>    }
  continue;...INVALID 
PROCESSING MUTANT: 29:   int *ansd = INTEGER(ans);  ==>    int +ansd = INTEGER(ans);...INVALID 
PROCESSING MUTANT: 29:   int *ansd = INTEGER(ans);  ==>    int -ansd = INTEGER(ans);...INVALID 
PROCESSING MUTANT: 29:   int *ansd = INTEGER(ans);  ==>    int /ansd = INTEGER(ans);...INVALID 
PROCESSING MUTANT: 29:   int *ansd = INTEGER(ans);  ==>    int %ansd = INTEGER(ans);...INVALID 
PROCESSING MUTANT: 29:   int *ansd = INTEGER(ans);  ==>    int *ansd = INTEGER(ans);
  break;...INVALID 
PROCESSING MUTANT: 29:   int *ansd = INTEGER(ans);  ==>    int *ansd = INTEGER(ans);
  continue;...INVALID 
PROCESSING MUTANT: 29:   int *ansd = INTEGER(ans);  ==>    /*int *ansd = INTEGER(ans);*/...INVALID 
PROCESSING MUTANT: 30:   const int tablelen = length(table);  ==>    const int tablelen = length(table);
  break;...INVALID 
PROCESSING MUTANT: 30:   const int tablelen = length(table);  ==>    const int tablelen = length(table);
  continue;...INVALID 
PROCESSING MUTANT: 30:   const int tablelen = length(table);  ==>    /*const int tablelen = length(table);*/...INVALID 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (tablelen!=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.98.c] 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (tablelen<=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.99.c] 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (tablelen>=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.100.c] 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (tablelen>0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.101.c] 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (tablelen<0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.102.c] 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (tablelen==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.103.c] 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (tablelen==-1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.104.c] 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (tablelen==(0+1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.105.c] 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (tablelen==(0-1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.106.c] 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (tablelen==0) {
  break;...INVALID 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (tablelen==0) {
  continue;...INVALID 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    /*if (tablelen==0) {*/...INVALID 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (!(tablelen==0)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.107.c] 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.108.c] 
PROCESSING MUTANT: 31:   if (tablelen==0) {  ==>    if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.109.c] 
PROCESSING MUTANT: 32:     const int val=(chin?0:nomatch), n=xlen;  ==>      const int val=(chin?1:nomatch), n=xlen;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.110.c] 
PROCESSING MUTANT: 32:     const int val=(chin?0:nomatch), n=xlen;  ==>      const int val=(chin?-1:nomatch), n=xlen;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.111.c] 
PROCESSING MUTANT: 32:     const int val=(chin?0:nomatch), n=xlen;  ==>      const int val=(chin?(0+1):nomatch), n=xlen;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.112.c] 
PROCESSING MUTANT: 32:     const int val=(chin?0:nomatch), n=xlen;  ==>      const int val=(chin?(0-1):nomatch), n=xlen;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.113.c] 
PROCESSING MUTANT: 32:     const int val=(chin?0:nomatch), n=xlen;  ==>      const int val=(chin?0:nomatch), n=xlen;
    break;...INVALID 
PROCESSING MUTANT: 32:     const int val=(chin?0:nomatch), n=xlen;  ==>      const int val=(chin?0:nomatch), n=xlen;
    continue;...INVALID 
PROCESSING MUTANT: 32:     const int val=(chin?0:nomatch), n=xlen;  ==>      const int val=( n=xlen;
,chin?0:nomatch)...INVALID 
PROCESSING MUTANT: 32:     const int val=(chin?0:nomatch), n=xlen;  ==>      /*const int val=(chin?0:nomatch), n=xlen;*/...INVALID 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<n; -+i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.114.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<n; +-i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.115.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<n; *+i) ansd[i]=val;...INVALID 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<n; +*i) ansd[i]=val;...INVALID 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<n; /+i) ansd[i]=val;...INVALID 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<n; +/i) ansd[i]=val;...INVALID 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<n; %+i) ansd[i]=val;...INVALID 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<n; +%i) ansd[i]=val;...INVALID 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i>n; ++i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.116.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i==n; ++i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.117.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<=n; ++i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.118.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i>=n; ++i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.119.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i!=n; ++i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.120.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<n; --i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.121.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=1; i<n; ++i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.122.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=-1; i<n; ++i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.123.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=(0+1); i<n; ++i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.124.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=(0-1); i<n; ++i) ansd[i]=val;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.125.c] 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<n; ++i) ansd[i]=val;
    break;...INVALID 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      for (int i=0; i<n; ++i) ansd[i]=val;
    continue;...INVALID 
PROCESSING MUTANT: 33:     for (int i=0; i<n; ++i) ansd[i]=val;  ==>      /*for (int i=0; i<n; ++i) ansd[i]=val;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.126.c] 
PROCESSING MUTANT: 34:     UNPROTECT(nprotect);  ==>      UNPROTECT(nprotect);
    break;...INVALID 
PROCESSING MUTANT: 34:     UNPROTECT(nprotect);  ==>      UNPROTECT(nprotect);
    continue;...INVALID 
PROCESSING MUTANT: 34:     UNPROTECT(nprotect);  ==>      /*UNPROTECT(nprotect);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.127.c] 
PROCESSING MUTANT: 35:     return ans;  ==>      return ans;
    break;...INVALID 
PROCESSING MUTANT: 35:     return ans;  ==>      return ans;
    continue;...INVALID 
PROCESSING MUTANT: 35:     return ans;  ==>      /*return ans;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.128.c] 
PROCESSING MUTANT: 36:   }  ==>    }
  break;...INVALID 
PROCESSING MUTANT: 36:   }  ==>    }
  continue;...INVALID 
LINE 37:   // Since non-ASCII strings may be marked with different encodings, it only make sense to compare APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 38:   // the bytes under a same encoding (UTF-8) #3844 #3850 APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 39:   SEXP *xd;  ==>    SEXP +xd;...INVALID 
PROCESSING MUTANT: 39:   SEXP *xd;  ==>    SEXP -xd;...INVALID 
PROCESSING MUTANT: 39:   SEXP *xd;  ==>    SEXP /xd;...INVALID 
PROCESSING MUTANT: 39:   SEXP *xd;  ==>    SEXP %xd;...INVALID 
PROCESSING MUTANT: 39:   SEXP *xd;  ==>    SEXP *xd;
  break;...INVALID 
PROCESSING MUTANT: 39:   SEXP *xd;  ==>    SEXP *xd;
  continue;...INVALID 
PROCESSING MUTANT: 39:   SEXP *xd;  ==>    /*SEXP *xd;*/...INVALID 
PROCESSING MUTANT: 40:   if (isSymbol(x)) {  ==>    if (isSymbol(x)) {
  break;...INVALID 
PROCESSING MUTANT: 40:   if (isSymbol(x)) {  ==>    if (isSymbol(x)) {
  continue;...INVALID 
PROCESSING MUTANT: 40:   if (isSymbol(x)) {  ==>    /*if (isSymbol(x)) {*/...INVALID 
PROCESSING MUTANT: 40:   if (isSymbol(x)) {  ==>    if (!(isSymbol(x))) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.129.c] 
PROCESSING MUTANT: 40:   if (isSymbol(x)) {  ==>    if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.130.c] 
PROCESSING MUTANT: 40:   if (isSymbol(x)) {  ==>    if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.131.c] 
PROCESSING MUTANT: 41:     xd = &sym;  ==>      xd = |sym;...INVALID 
PROCESSING MUTANT: 41:     xd = &sym;  ==>      xd = &sym;
    break;...INVALID 
PROCESSING MUTANT: 41:     xd = &sym;  ==>      xd = &sym;
    continue;...INVALID 
PROCESSING MUTANT: 41:     xd = &sym;  ==>      /*xd = &sym;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.132.c] 
PROCESSING MUTANT: 42:   } else {  ==>    } else {
  break;...INVALID 
PROCESSING MUTANT: 42:   } else {  ==>    } else {
  continue;...INVALID 
PROCESSING MUTANT: 42:   } else {  ==>    /*} else {*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.133.c] 
PROCESSING MUTANT: 42:   } else {  ==>    }  {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.134.c] 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect-+;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect+-;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect*+;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect+*;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect/+;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect+/;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect%+;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect+%;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect--;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.135.c] 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf0IfNeeded(x))); nprotect++;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf1IfNeeded(x))); nprotect++;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf-1IfNeeded(x))); nprotect++;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf(8+1)IfNeeded(x))); nprotect++;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf(8-1)IfNeeded(x))); nprotect++;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;
    break;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;
    continue;...INVALID 
PROCESSING MUTANT: 43:     xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;  ==>      /*xd = STRING_PTR(PROTECT(coerceUtf8IfNeeded(x))); nprotect++;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.136.c] 
PROCESSING MUTANT: 44:   }  ==>    }
  break;...INVALID 
PROCESSING MUTANT: 44:   }  ==>    }
  continue;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect-+;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect+-;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect*+;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect+*;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect/+;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect+/;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect%+;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect+%;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP +td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP -td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP /td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP %td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect--;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.137.c] 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf0IfNeeded(table))); nprotect++;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf1IfNeeded(table))); nprotect++;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf-1IfNeeded(table))); nprotect++;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf(8+1)IfNeeded(table))); nprotect++;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf(8-1)IfNeeded(table))); nprotect++;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;
  break;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;
  continue;...INVALID 
PROCESSING MUTANT: 45:   const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;  ==>    /*const SEXP *td = STRING_PTR(PROTECT(coerceUtf8IfNeeded(table))); nprotect++;*/...INVALID 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (xlen!=1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.138.c] 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (xlen<=1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.139.c] 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (xlen>=1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.140.c] 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (xlen>1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.141.c] 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (xlen<1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.142.c] 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (xlen==0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.143.c] 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (xlen==-1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.144.c] 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (xlen==(1+1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.145.c] 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (xlen==(1-1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.146.c] 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (xlen==1) {
  break;...INVALID 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (xlen==1) {
  continue;...INVALID 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    /*if (xlen==1) {*/...INVALID 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (!(xlen==1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.147.c] 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.148.c] 
PROCESSING MUTANT: 46:   if (xlen==1) {  ==>    if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.149.c] 
PROCESSING MUTANT: 47:     ansd[0] = nomatch;  ==>      ansd[1] = nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.150.c] 
PROCESSING MUTANT: 47:     ansd[0] = nomatch;  ==>      ansd[-1] = nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.151.c] 
PROCESSING MUTANT: 47:     ansd[0] = nomatch;  ==>      ansd[(0+1)] = nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.152.c] 
PROCESSING MUTANT: 47:     ansd[0] = nomatch;  ==>      ansd[(0-1)] = nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.153.c] 
PROCESSING MUTANT: 47:     ansd[0] = nomatch;  ==>      ansd[0] = nomatch;
    break;...INVALID 
PROCESSING MUTANT: 47:     ansd[0] = nomatch;  ==>      ansd[0] = nomatch;
    continue;...INVALID 
PROCESSING MUTANT: 47:     ansd[0] = nomatch;  ==>      /*ansd[0] = nomatch;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.154.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<tablelen; -+i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.155.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<tablelen; +-i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.156.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<tablelen; *+i) {...INVALID 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<tablelen; +*i) {...INVALID 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<tablelen; /+i) {...INVALID 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<tablelen; +/i) {...INVALID 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<tablelen; %+i) {...INVALID 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<tablelen; +%i) {...INVALID 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i>tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.157.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i==tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.158.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<=tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.159.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i>=tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.160.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i!=tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.161.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<tablelen; --i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.162.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=1; i<tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.163.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=-1; i<tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.164.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=(0+1); i<tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.165.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=(0-1); i<tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.166.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<tablelen; ++i) {
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.167.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      for (int i=0; i<tablelen; ++i) {
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.168.c] 
PROCESSING MUTANT: 48:     for (int i=0; i<tablelen; ++i) {  ==>      /*for (int i=0; i<tablelen; ++i) {*/...INVALID 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (td[i]!=xd[0]) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.169.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (td[i]<=xd[0]) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.170.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (td[i]>=xd[0]) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.171.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (td[i]>xd[0]) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.172.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (td[i]<xd[0]) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.173.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (td[i]==xd[1]) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.174.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (td[i]==xd[-1]) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.175.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (td[i]==xd[(0+1)]) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.176.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (td[i]==xd[(0-1)]) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.177.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (td[i]==xd[0]) {
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.178.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (td[i]==xd[0]) {
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.179.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        /*if (td[i]==xd[0]) {*/...INVALID 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (!(td[i]==xd[0])) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.180.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.181.c] 
PROCESSING MUTANT: 49:       if (td[i]==xd[0]) {  ==>        if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.182.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? 1 : i-1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.183.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? 1 : i*1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.184.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? 1 : i/1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.185.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? 1 : i%1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.186.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? 0 : i+1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.187.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? 1 : i+0;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.188.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[1] = chin ? 1 : i+1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.189.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[-1] = chin ? 1 : i+1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.190.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? -1 : i+1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.191.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? 1 : i+-1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.192.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[(0+1)] = chin ? 1 : i+1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.193.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? (1+1) : i+1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.194.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? 1 : i+(1+1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.195.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[(0-1)] = chin ? 1 : i+1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.196.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? (1-1) : i+1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.197.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? 1 : i+(1-1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.198.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? 1 : i+1;
        break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.199.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          ansd[0] = chin ? 1 : i+1;
        continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.200.c] 
PROCESSING MUTANT: 50:         ansd[0] = chin ? 1 : i+1;  ==>          /*ansd[0] = chin ? 1 : i+1;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.201.c] 
PROCESSING MUTANT: 51:         break; // short-circuit early; if there are dups in table the first is returned  ==>          break; // short+circuit early; if there are dups in table the first is returned...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.202.c] 
PROCESSING MUTANT: 51:         break; // short-circuit early; if there are dups in table the first is returned  ==>          break; // short*circuit early; if there are dups in table the first is returned...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.203.c] 
PROCESSING MUTANT: 51:         break; // short-circuit early; if there are dups in table the first is returned  ==>          break; // short/circuit early; if there are dups in table the first is returned...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.204.c] 
PROCESSING MUTANT: 51:         break; // short-circuit early; if there are dups in table the first is returned  ==>          break; // short%circuit early; if there are dups in table the first is returned...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.205.c] 
PROCESSING MUTANT: 51:         break; // short-circuit early; if there are dups in table the first is returned  ==>          break; // shortcircuit early; if there are dups in table the first is returned...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.206.c] 
PROCESSING MUTANT: 51:         break; // short-circuit early; if there are dups in table the first is returned  ==>          break; // short-circuit early; if there are dups in table the first is returned
        break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.207.c] 
PROCESSING MUTANT: 51:         break; // short-circuit early; if there are dups in table the first is returned  ==>          break; // short-circuit early; if there are dups in table the first is returned
        continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.208.c] 
PROCESSING MUTANT: 51:         break; // short-circuit early; if there are dups in table the first is returned  ==>          /*break; // short-circuit early; if there are dups in table the first is returned*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.209.c] 
PROCESSING MUTANT: 52:       }  ==>        }
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.210.c] 
PROCESSING MUTANT: 52:       }  ==>        }
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.211.c] 
PROCESSING MUTANT: 53:     }  ==>      }
    break;...INVALID 
PROCESSING MUTANT: 53:     }  ==>      }
    continue;...INVALID 
PROCESSING MUTANT: 54:     UNPROTECT(nprotect);  ==>      UNPROTECT(nprotect);
    break;...INVALID 
PROCESSING MUTANT: 54:     UNPROTECT(nprotect);  ==>      UNPROTECT(nprotect);
    continue;...INVALID 
PROCESSING MUTANT: 54:     UNPROTECT(nprotect);  ==>      /*UNPROTECT(nprotect);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.212.c] 
PROCESSING MUTANT: 55:     return ans;  ==>      return ans;
    break;...INVALID 
PROCESSING MUTANT: 55:     return ans;  ==>      return ans;
    continue;...INVALID 
PROCESSING MUTANT: 55:     return ans;  ==>      /*return ans;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.213.c] 
PROCESSING MUTANT: 56:   }  ==>    }
  break;...INVALID 
PROCESSING MUTANT: 56:   }  ==>    }
  continue;...INVALID 
LINE 57:   // else xlen>1; nprotect is const above since no more R allocations should occur after this point APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 58:   savetl_init();  ==>    savetl_init();
  break;...INVALID 
PROCESSING MUTANT: 58:   savetl_init();  ==>    savetl_init();
  continue;...INVALID 
PROCESSING MUTANT: 58:   savetl_init();  ==>    /*savetl_init();*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.214.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<xlen; i-+) {...INVALID 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<xlen; i+-) {...INVALID 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<xlen; i*+) {...INVALID 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<xlen; i+*) {...INVALID 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<xlen; i/+) {...INVALID 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<xlen; i+/) {...INVALID 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<xlen; i%+) {...INVALID 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<xlen; i+%) {...INVALID 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i>xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.215.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i==xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.216.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<=xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.217.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i>=xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.218.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i!=xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.219.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<xlen; i--) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.220.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=1; i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.221.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=-1; i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.222.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=(0+1); i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.223.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=(0-1); i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.224.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<xlen; i++) {
  break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.225.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    for (int i=0; i<xlen; i++) {
  continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.226.c] 
PROCESSING MUTANT: 59:   for (int i=0; i<xlen; i++) {  ==>    /*for (int i=0; i<xlen; i++) {*/...INVALID 
PROCESSING MUTANT: 60:     SEXP s = xd[i];  ==>      SEXP s = xd[i];
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.227.c] 
PROCESSING MUTANT: 60:     SEXP s = xd[i];  ==>      SEXP s = xd[i];
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.228.c] 
PROCESSING MUTANT: 60:     SEXP s = xd[i];  ==>      /*SEXP s = xd[i];*/...INVALID 
PROCESSING MUTANT: 61:     const int tl = TRUELENGTH(s);  ==>      const int tl = TRUELENGTH(s);
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.229.c] 
PROCESSING MUTANT: 61:     const int tl = TRUELENGTH(s);  ==>      const int tl = TRUELENGTH(s);
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.230.c] 
PROCESSING MUTANT: 61:     const int tl = TRUELENGTH(s);  ==>      /*const int tl = TRUELENGTH(s);*/...INVALID 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (tl<0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.231.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (tl==0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.232.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (tl>=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.233.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (tl<=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.234.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (tl!=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.235.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (tl>1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.236.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (tl>-1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.237.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (tl>(0+1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.238.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (tl>(0-1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.239.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (tl>0) {
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.240.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (tl>0) {
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.241.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      /*if (tl>0) {*/...INVALID 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (!(tl>0)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.242.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.243.c] 
PROCESSING MUTANT: 62:     if (tl>0) {  ==>      if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.244.c] 
PROCESSING MUTANT: 63:       savetl(s);  // R's internal hash (which is positive); save it  ==>        savetl(s);  // R's internal hash (which is positive); save it
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.245.c] 
PROCESSING MUTANT: 63:       savetl(s);  // R's internal hash (which is positive); save it  ==>        savetl(s);  // R's internal hash (which is positive); save it
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.246.c] 
PROCESSING MUTANT: 63:       savetl(s);  // R's internal hash (which is positive); save it  ==>        /*savetl(s);  // R's internal hash (which is positive); save it*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.247.c] 
PROCESSING MUTANT: 64:       SET_TRUELENGTH(s,0);  ==>        SET_TRUELENGTH(s,1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.248.c] 
PROCESSING MUTANT: 64:       SET_TRUELENGTH(s,0);  ==>        SET_TRUELENGTH(s,-1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.249.c] 
PROCESSING MUTANT: 64:       SET_TRUELENGTH(s,0);  ==>        SET_TRUELENGTH(s,(0+1));...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.250.c] 
PROCESSING MUTANT: 64:       SET_TRUELENGTH(s,0);  ==>        SET_TRUELENGTH(s,(0-1));...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.251.c] 
PROCESSING MUTANT: 64:       SET_TRUELENGTH(s,0);  ==>        SET_TRUELENGTH(s,0);
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.252.c] 
PROCESSING MUTANT: 64:       SET_TRUELENGTH(s,0);  ==>        SET_TRUELENGTH(s,0);
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.253.c] 
PROCESSING MUTANT: 64:       SET_TRUELENGTH(s,0);  ==>        SET_TRUELENGTH(0,s);...INVALID 
PROCESSING MUTANT: 64:       SET_TRUELENGTH(s,0);  ==>        /*SET_TRUELENGTH(s,0);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.254.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (tl>0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.255.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (tl==0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.256.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (tl<=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.257.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (tl>=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.258.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (tl!=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.259.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (tl<1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.260.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (tl<-1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.261.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (tl<(0+1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.262.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (tl<(0-1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.263.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (tl<0) {
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.264.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (tl<0) {
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.265.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      /*} else if (tl<0) {*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.266.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (!(tl<0)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.267.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.268.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      } else if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.269.c] 
PROCESSING MUTANT: 65:     } else if (tl<0) {  ==>      }  if (tl<0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.270.c] 
LINE 66:       // R 2.14.0+ initializes truelength to 0 (before that it was uninitialized/random). APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 67:       // Now that data.table depends on R 3.1.0+, that is after 2.14.0 too. APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 68:       // We rely on that 0-initialization, and that R's internal hash is positive. APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 69:       // # nocov start APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 70:       savetl_end();  ==>        savetl_end();
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.271.c] 
PROCESSING MUTANT: 70:       savetl_end();  ==>        savetl_end();
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.272.c] 
PROCESSING MUTANT: 70:       savetl_end();  ==>        savetl_begin();...INVALID 
PROCESSING MUTANT: 70:       savetl_end();  ==>        /*savetl_end();*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.273.c] 
PROCESSING MUTANT: 71:       error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);  ==>        error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.274.c] 
PROCESSING MUTANT: 71:       error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);  ==>        error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.275.c] 
PROCESSING MUTANT: 71:       error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);  ==>        error(_(""), CHAR(s), tl);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.276.c] 
PROCESSING MUTANT: 71:       error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);  ==>        error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), tl, CHAR(s));...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.277.c] 
PROCESSING MUTANT: 71:       error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);  ==>        error( CHAR(s,_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker.")), tl);...INVALID 
PROCESSING MUTANT: 71:       error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);  ==>        error(_( CHAR(s,"Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker.")), tl);...INVALID 
PROCESSING MUTANT: 71:       error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);  ==>        error(_("Internal error: CHARSXP '%s' has a negative truelength ( CHAR(s,%d). Please file an issue on the data.table tracker.")), tl);...INVALID 
PROCESSING MUTANT: 71:       error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);  ==>        error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR( tl,s));...INVALID 
PROCESSING MUTANT: 71:       error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);  ==>        /*error(_("Internal error: CHARSXP '%s' has a negative truelength (%d). Please file an issue on the data.table tracker."), CHAR(s), tl);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.278.c] 
LINE 72:       // # nocov end APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 73:     }  ==>      }
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.279.c] 
PROCESSING MUTANT: 73:     }  ==>      }
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.280.c] 
PROCESSING MUTANT: 74:   }  ==>    }
  break;...INVALID 
PROCESSING MUTANT: 74:   }  ==>    }
  continue;...INVALID 
PROCESSING MUTANT: 75:   int nuniq=0;  ==>    int nuniq=1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.281.c] 
PROCESSING MUTANT: 75:   int nuniq=0;  ==>    int nuniq=-1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.282.c] 
PROCESSING MUTANT: 75:   int nuniq=0;  ==>    int nuniq=(0+1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.283.c] 
PROCESSING MUTANT: 75:   int nuniq=0;  ==>    int nuniq=(0-1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.284.c] 
PROCESSING MUTANT: 75:   int nuniq=0;  ==>    int nuniq=0;
  break;...INVALID 
PROCESSING MUTANT: 75:   int nuniq=0;  ==>    int nuniq=0;
  continue;...INVALID 
PROCESSING MUTANT: 75:   int nuniq=0;  ==>    /*int nuniq=0;*/...INVALID 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<tablelen; -+i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.285.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<tablelen; +-i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.286.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<tablelen; *+i) {...INVALID 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<tablelen; +*i) {...INVALID 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<tablelen; /+i) {...INVALID 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<tablelen; +/i) {...INVALID 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<tablelen; %+i) {...INVALID 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<tablelen; +%i) {...INVALID 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i>tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.287.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i==tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.288.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<=tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.289.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i>=tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.290.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i!=tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.291.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<tablelen; --i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.292.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=1; i<tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.293.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=-1; i<tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.294.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=(0+1); i<tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.295.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=(0-1); i<tablelen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.296.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<tablelen; ++i) {
  break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.297.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    for (int i=0; i<tablelen; ++i) {
  continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.298.c] 
PROCESSING MUTANT: 76:   for (int i=0; i<tablelen; ++i) {  ==>    /*for (int i=0; i<tablelen; ++i) {*/...INVALID 
PROCESSING MUTANT: 77:     const SEXP s = td[i];  ==>      const SEXP s = td[i];
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.299.c] 
PROCESSING MUTANT: 77:     const SEXP s = td[i];  ==>      const SEXP s = td[i];
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.300.c] 
PROCESSING MUTANT: 77:     const SEXP s = td[i];  ==>      /*const SEXP s = td[i];*/...INVALID 
PROCESSING MUTANT: 78:     int tl = TRUELENGTH(s);  ==>      int tl = TRUELENGTH(s);
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.301.c] 
PROCESSING MUTANT: 78:     int tl = TRUELENGTH(s);  ==>      int tl = TRUELENGTH(s);
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.302.c] 
PROCESSING MUTANT: 78:     int tl = TRUELENGTH(s);  ==>      /*int tl = TRUELENGTH(s);*/...INVALID 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl<0) { savetl(s); tl=0; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.303.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl==0) { savetl(s); tl=0; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.304.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl>=0) { savetl(s); tl=0; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.305.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl<=0) { savetl(s); tl=0; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.306.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl!=0) { savetl(s); tl=0; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.307.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl>1) { savetl(s); tl=0; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.308.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl>0) { savetl(s); tl=1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.309.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl>-1) { savetl(s); tl=0; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.310.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl>0) { savetl(s); tl=-1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.311.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl>(0+1)) { savetl(s); tl=0; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.312.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl>0) { savetl(s); tl=(0+1); }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.313.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl>(0-1)) { savetl(s); tl=0; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.314.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl>0) { savetl(s); tl=(0-1); }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.315.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl>0) { savetl(s); tl=0; }
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.316.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (tl>0) { savetl(s); tl=0; }
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.317.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      /*if (tl>0) { savetl(s); tl=0; }*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.318.c] 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (!(tl>0) { savetl(s)); tl=0; }...INVALID 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (0==1); tl=0; }...INVALID 
PROCESSING MUTANT: 79:     if (tl>0) { savetl(s); tl=0; }  ==>      if (1==1); tl=0; }...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(-+nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.319.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(+-nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.320.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(*+nuniq) : -i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(+*nuniq) : -i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(/+nuniq) : -i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(+/nuniq) : -i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(%+nuniq) : -i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(+%nuniq) : -i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? +(++nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.321.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : +i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.322.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i+1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.323.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? *(++nuniq) : -i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : *i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i*1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.324.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? /(++nuniq) : -i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : /i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i/1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.325.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? %(++nuniq) : -i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : %i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i%1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.326.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl!=0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.327.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl<=0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.328.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl>=0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.329.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl>0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.330.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl<0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.331.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(--nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.332.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? (++nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.333.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.334.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-0); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.335.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==1) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.336.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==-1) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.337.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i--1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==(0+1)) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.338.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-(1+1)); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.339.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==(0-1)) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.340.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-(1-1)); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.341.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.342.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.343.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if ( chmatchdup ? -(++nuniq,tl==0) SET_TRUELENGTH(s) : -i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (tl==0) SET_TRUELENGTH( chmatchdup ? -(++nuniq,s) : -i-1); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      /*if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.344.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (!(tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1)); // first time seen this string in table...INVALID 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (0==1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.345.c] 
PROCESSING MUTANT: 80:     if (tl==0) SET_TRUELENGTH(s, chmatchdup ? -(++nuniq) : -i-1); // first time seen this string in table  ==>      if (1==1); // first time seen this string in table...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.346.c] 
PROCESSING MUTANT: 81:   }  ==>    }
  break;...INVALID 
PROCESSING MUTANT: 81:   }  ==>    }
  continue;...INVALID 
LINE 82:   // in future if we need NAs in x not to be matched to NAs in table ... APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 83:   // if (!matchNAtoNA && TRUELENGTH(NA_STRING)<0) APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 84:   //   SET_TRUELENGTH(NA_STRING, 0); APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 85:   if (chmatchdup) {  ==>    if (chmatchdup) {
  break;...INVALID 
PROCESSING MUTANT: 85:   if (chmatchdup) {  ==>    if (chmatchdup) {
  continue;...INVALID 
PROCESSING MUTANT: 85:   if (chmatchdup) {  ==>    /*if (chmatchdup) {*/...INVALID 
PROCESSING MUTANT: 85:   if (chmatchdup) {  ==>    if (!(chmatchdup)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.347.c] 
PROCESSING MUTANT: 85:   if (chmatchdup) {  ==>    if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.348.c] 
PROCESSING MUTANT: 85:   if (chmatchdup) {  ==>    if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.349.c] 
LINE 86:     // chmatchdup() is basically base::pmatch() but without the partial matching part. For example : APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 87:     //   chmatchdup(c("a", "a"), c("a", "a"))   # 1,2  - the second 'a' in 'x' has a 2nd match in 'table' APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 88:     //   chmatchdup(c("a", "a"), c("a", "b"))   # 1,NA - the second one doesn't 'see' the first 'a' APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 89:     //   chmatchdup(c("a", "a"), c("a", "a.1")) # 1,NA - differs from 'pmatch' output = 1,2 APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 90:     // Used to be called chmatch2 before v1.12.2 and was in rbindlist.c. New implementation from 1.12.2 here in chmatch.c APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 91:     // If nuniq==tablelen then there are no dups in table but we still need this branch because there might be dups APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 92:     //   in x and the 2nd onwards of any dup needs to return NA APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 93:     // See end of file for benchmark APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 94:     //                                                                                        uniq         dups APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 95:     // For example: A,B,C,B,D,E,A,A   =>   A(TL=1),B(2),C(3),D(4),E(5)   =>   dupMap    1  2  3  5  6 | 8  7  4 APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 96:     //                                                                        dupLink   7  8          |    6     (blank=0) APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int +counts = (int *)calloc(nuniq, sizeof(int));...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int *counts = (int +)calloc(nuniq, sizeof(int));...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int -counts = (int *)calloc(nuniq, sizeof(int));...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int *counts = (int -)calloc(nuniq, sizeof(int));...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int /counts = (int *)calloc(nuniq, sizeof(int));...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int *counts = (int /)calloc(nuniq, sizeof(int));...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int %counts = (int *)calloc(nuniq, sizeof(int));...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int *counts = (int %)calloc(nuniq, sizeof(int));...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int *counts = (int *)calloc(nuniq, sizeof(int));
    break;...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int *counts = (int *)calloc(nuniq, sizeof(int));
    continue;...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int *counts = ( sizeof(int,int *)calloc(nuniq));...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      int *counts = (int *)calloc( sizeof(int,nuniq));...INVALID 
PROCESSING MUTANT: 97:     int *counts = (int *)calloc(nuniq, sizeof(int));  ==>      /*int *counts = (int *)calloc(nuniq, sizeof(int));*/...INVALID 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen-nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.350.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // -nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.351.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen*nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.352.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // *nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.353.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen/nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.354.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // /nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.355.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen%nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.356.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // %nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.357.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #0 // +nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.358.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #1 // +nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.359.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #-1 // +nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.360.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #(5760+1) // +nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.361.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #(5760-1) // +nuniq to store a 0 at the end of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.362.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group
    break;...INVALID 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group
    continue;...INVALID 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the begin of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.363.c] 
PROCESSING MUTANT: 98:     unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group  ==>      /*unsigned int mapsize = tablelen+nuniq; // lto compilation warning #5760 // +nuniq to store a 0 at the end of each group*/...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int +map =    (int *)calloc(mapsize, sizeof(int));...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int *map =    (int +)calloc(mapsize, sizeof(int));...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int -map =    (int *)calloc(mapsize, sizeof(int));...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int *map =    (int -)calloc(mapsize, sizeof(int));...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int /map =    (int *)calloc(mapsize, sizeof(int));...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int *map =    (int /)calloc(mapsize, sizeof(int));...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int %map =    (int *)calloc(mapsize, sizeof(int));...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int *map =    (int %)calloc(mapsize, sizeof(int));...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int *map =    (int *)calloc(mapsize, sizeof(int));
    break;...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int *map =    (int *)calloc(mapsize, sizeof(int));
    continue;...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int *map =    ( sizeof(int,int *)calloc(mapsize));...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      int *map =    (int *)calloc( sizeof(int,mapsize));...INVALID 
PROCESSING MUTANT: 99:     int *map =    (int *)calloc(mapsize, sizeof(int));  ==>      /*int *map =    (int *)calloc(mapsize, sizeof(int));*/...INVALID 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (!counts && !map) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.364.c] 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (counts || !map) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.365.c] 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (!counts || map) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.366.c] 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (!counts || !map) {
    break;...INVALID 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (!counts || !map) {
    continue;...INVALID 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      /*if (!counts || !map) {*/...INVALID 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (!(!counts || !map)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.367.c] 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.368.c] 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.369.c] 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (!counts || (0==1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.370.c] 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (!counts || (0==1)...INVALID 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if ((0==1) || !map) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.371.c] 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>   (0==1) || !map) {...INVALID 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>    (0==1) || !map) {...INVALID 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>     (0==1) || !map) {...INVALID 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      (0==1) || !map) {...INVALID 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (0==1) || !map) {...INVALID 
PROCESSING MUTANT: 100:     if (!counts || !map) {  ==>      if (!counts (0==1) || !map) {...INVALID 
LINE 101:       // # nocov start APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i-+) SET_TRUELENGTH(td[i], 0);...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i+-) SET_TRUELENGTH(td[i], 0);...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i*+) SET_TRUELENGTH(td[i], 0);...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i+*) SET_TRUELENGTH(td[i], 0);...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i/+) SET_TRUELENGTH(td[i], 0);...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i+/) SET_TRUELENGTH(td[i], 0);...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i%+) SET_TRUELENGTH(td[i], 0);...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i+%) SET_TRUELENGTH(td[i], 0);...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i>tablelen; i++) SET_TRUELENGTH(td[i], 0);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.372.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i==tablelen; i++) SET_TRUELENGTH(td[i], 0);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.373.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<=tablelen; i++) SET_TRUELENGTH(td[i], 0);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.374.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i>=tablelen; i++) SET_TRUELENGTH(td[i], 0);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.375.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i!=tablelen; i++) SET_TRUELENGTH(td[i], 0);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.376.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i--) SET_TRUELENGTH(td[i], 0);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.377.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=1; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.378.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.379.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=-1; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.380.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], -1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.381.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=(0+1); i<tablelen; i++) SET_TRUELENGTH(td[i], 0);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.382.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], (0+1));...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.383.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=(0-1); i<tablelen; i++) SET_TRUELENGTH(td[i], 0);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.384.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], (0-1));...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.385.c] 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);
      break;...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);
      continue;...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for ( 0,int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i]);...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i++) SET_TRUELENGTH( 0,td[i]);...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[ 0);
,i]...INVALID 
PROCESSING MUTANT: 102:       for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);  ==>        /*for (int i=0; i<tablelen; i++) SET_TRUELENGTH(td[i], 0);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.386.c] 
PROCESSING MUTANT: 103:       savetl_end();  ==>        savetl_end();
      break;...INVALID 
PROCESSING MUTANT: 103:       savetl_end();  ==>        savetl_end();
      continue;...INVALID 
PROCESSING MUTANT: 103:       savetl_end();  ==>        savetl_begin();...INVALID 
PROCESSING MUTANT: 103:       savetl_end();  ==>        /*savetl_end();*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.387.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2-nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.388.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2*nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.389.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2/nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.390.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2%nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.391.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen+2+nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.392.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)+sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.393.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen-2+nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.394.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)-sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.395.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen/2+nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.396.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)/sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.397.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen%2+nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.398.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)%sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.399.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu0" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint0_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*0+nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.400.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu1" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint1_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*1+nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.401.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu-1" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint-1_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*-1+nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.402.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu(64+1)" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint(64+1)_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*(2+1)+nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.403.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu(64-1)" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint(64-1)_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*(2-1)+nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.404.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);
      break;...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);
      continue;...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_(""), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.405.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %""), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64""), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.406.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), tablelen, ((uint64_t)tablelen*2+nuniq)*sizeof(int), nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.407.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), nuniq, tablelen);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.408.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error( ((uint64_t,_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"))tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_( ((uint64_t,"Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"))tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length( ((uint64_t,table)=%d length(unique(table))=%d"))tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length( ((uint64_t,unique(table))=%d"))tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique( ((uint64_t,table))=%d"))tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ( tablelen,(uint64_t)tablelen*2+nuniq)*sizeof(int), nuniq);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.409.c] 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), (( tablelen,uint64_t)tablelen*2+nuniq)*sizeof(int), nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof( tablelen,int), nuniq);...INVALID 
PROCESSING MUTANT: 104:       error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);  ==>        /*error(_("Failed to allocate %"PRIu64" bytes working memory in chmatchdup: length(table)=%d length(unique(table))=%d"), ((uint64_t)tablelen*2+nuniq)*sizeof(int), tablelen, nuniq);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.410.c] 
LINE 105:       // # nocov end APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 106:     }  ==>      }
    break;...INVALID 
PROCESSING MUTANT: 106:     }  ==>      }
    continue;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; -+i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.411.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; +-i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.412.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]-+;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]+-;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; *+i) counts[-TRUELENGTH(td[i])-1]++;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; +*i) counts[-TRUELENGTH(td[i])-1]++;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]*+;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]+*;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; /+i) counts[-TRUELENGTH(td[i])-1]++;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; +/i) counts[-TRUELENGTH(td[i])-1]++;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]/+;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]+/;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; %+i) counts[-TRUELENGTH(td[i])-1]++;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; +%i) counts[-TRUELENGTH(td[i])-1]++;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]%+;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]+%;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[+TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.413.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])+1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.414.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[*TRUELENGTH(td[i])-1]++;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])*1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.415.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[/TRUELENGTH(td[i])-1]++;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])/1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.416.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[%TRUELENGTH(td[i])-1]++;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])%1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.417.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i>tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.418.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i==tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.419.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<=tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.420.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i>=tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.421.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i!=tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.422.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; --i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.423.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]--;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.424.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.425.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])1]++;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-0]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.426.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=1; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.427.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=-1; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.428.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])--1]++;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=(0+1); i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.429.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-(1+1)]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.430.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=(0-1); i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.431.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-(1-1)]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.432.c] 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;
    break;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;
    continue;...INVALID 
PROCESSING MUTANT: 107:     for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;  ==>      /*for (int i=0; i<tablelen; ++i) counts[-TRUELENGTH(td[i])-1]++;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.433.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; -+i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.434.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; +-i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.435.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum-=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.436.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt-1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.437.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; *+i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...INVALID 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; +*i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...INVALID 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum*=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.438.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt*1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.439.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; /+i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...INVALID 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; +/i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...INVALID 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum/=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.440.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt/1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.441.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; %+i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...INVALID 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; +%i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...INVALID 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum%=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.442.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt%1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.443.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i>nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.444.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i==nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.445.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<=nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.446.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i>=nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.447.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i!=nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.448.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum=+tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.449.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; --i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.450.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+0; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.451.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=1, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.452.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=1; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.453.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=-1, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.454.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=-1; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.455.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+-1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.456.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=(0+1), sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.457.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=(0+1); i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.458.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+(1+1); }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.459.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=(0-1), sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.460.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=(0-1); i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.461.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+(1-1); }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.462.c] 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }
    break;...INVALID 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }
    continue;...INVALID 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      for ( sum=0; i<nuniq; ++i,int i=0) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }...INVALID 
PROCESSING MUTANT: 108:     for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }  ==>      /*for (int i=0, sum=0; i<nuniq; ++i) { int tt=counts[i]; counts[i]=sum; sum+=tt+1; }*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.463.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; -+i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.464.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; +-i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.465.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]-+] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]+-] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i-1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.466.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; *+i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; +*i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]*+] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]+*] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i*1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.467.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; /+i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; +/i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]/+] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]+/] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i/1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.468.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; %+i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; +%i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]%+] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]+%] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i%1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.469.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[+TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.470.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])+1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.471.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[*TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])*1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.472.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[/TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])/1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.473.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[%TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])%1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.474.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i>tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.475.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i==tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.476.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<=tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.477.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i>=tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.478.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i!=tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.479.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; --i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.480.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]--] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.481.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.482.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])1]++] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-0]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.483.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+0;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.484.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=1; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.485.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 1 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.486.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=-1; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.487.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])--1]++] = i+1;           // 0 is left ending each group thanks to the calloc...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+-1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.488.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // -1 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.489.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=(0+1); i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.490.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-(1+1)]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.491.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+(1+1);           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.492.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // (0+1) is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.493.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=(0-1); i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.494.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-(1-1)]++] = i+1;           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.495.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+(1-1);           // 0 is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.496.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // (0-1) is left ending each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.497.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc
    break;...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc
    continue;...INVALID 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left begining each group thanks to the calloc...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.498.c] 
PROCESSING MUTANT: 109:     for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc  ==>      /*for (int i=0; i<tablelen; ++i) map[counts[-TRUELENGTH(td[i])-1]++] = i+1;           // 0 is left ending each group thanks to the calloc*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.499.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; -+i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.500.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; +-i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.501.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]-1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.502.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; *+i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...INVALID 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; +*i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...INVALID 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]*1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.503.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; /+i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...INVALID 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; +/i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...INVALID 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]/1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.504.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; %+i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...INVALID 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; +%i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...INVALID 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]%1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.505.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i>nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.506.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i==nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.507.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<=nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.508.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i>=nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.509.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i!=nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.510.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; --i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.511.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+0; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.512.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=1, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.513.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=1; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.514.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=-1, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.515.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=-1; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.516.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+-1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.517.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=(0+1), last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.518.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=(0+1); i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.519.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+(1+1); counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.520.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=(0-1), last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.521.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=(0-1); i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.522.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+(1-1); counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.523.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group
    break;...INVALID 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group
    continue;...INVALID 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for ( last=0; i<nuniq; ++i,int i=0) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group...INVALID 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the endning of each group...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.524.c] 
PROCESSING MUTANT: 110:     for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group  ==>      /*for (int i=0, last=0; i<nuniq; ++i) {int tt=counts[i]+1; counts[i]=last; last=tt;}  // rewind counts to the beginning of each group*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.525.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<xlen; -+i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.526.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<xlen; +-i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.527.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<xlen; *+i) {...INVALID 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<xlen; +*i) {...INVALID 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<xlen; /+i) {...INVALID 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<xlen; +/i) {...INVALID 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<xlen; %+i) {...INVALID 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<xlen; +%i) {...INVALID 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i>xlen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.528.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i==xlen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.529.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<=xlen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.530.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i>=xlen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.531.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i!=xlen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.532.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<xlen; --i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.533.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=1; i<xlen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.534.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=-1; i<xlen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.535.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=(0+1); i<xlen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.536.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=(0-1); i<xlen; ++i) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.537.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<xlen; ++i) {
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.538.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      for (int i=0; i<xlen; ++i) {
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.539.c] 
PROCESSING MUTANT: 111:     for (int i=0; i<xlen; ++i) {  ==>      /*for (int i=0; i<xlen; ++i) {*/...INVALID 
PROCESSING MUTANT: 112:       int u = TRUELENGTH(xd[i]);  ==>        int u = TRUELENGTH(xd[i]);
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.540.c] 
PROCESSING MUTANT: 112:       int u = TRUELENGTH(xd[i]);  ==>        int u = TRUELENGTH(xd[i]);
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.541.c] 
PROCESSING MUTANT: 112:       int u = TRUELENGTH(xd[i]);  ==>        /*int u = TRUELENGTH(xd[i]);*/...INVALID 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (u>0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.542.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (u==0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.543.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (u<=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.544.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (u>=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.545.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (u!=0) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.546.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (u<1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.547.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (u<-1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.548.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (u<(0+1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.549.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (u<(0-1)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.550.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (u<0) {
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.551.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (u<0) {
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.552.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        /*if (u<0) {*/...INVALID 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (!(u<0)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.553.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.554.c] 
PROCESSING MUTANT: 113:       if (u<0) {  ==>        if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.555.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-1]-+;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-1]+-;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-1]*+;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-1]+*;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-1]/+;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-1]+/;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-1]%+;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-1]+%;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[+u-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.556.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u+1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.557.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[*u-1]++;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u*1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.558.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[/u-1]++;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u/1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.559.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[%u-1]++;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u%1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.560.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-1]--;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.561.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[u-1]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.562.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u1]++;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-0]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.563.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u--1]++;...INVALID 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-(1+1)]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.564.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-(1-1)]++;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.565.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-1]++;
        break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.566.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          const int w = counts[-u-1]++;
        continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.567.c] 
PROCESSING MUTANT: 114:         const int w = counts[-u-1]++;  ==>          /*const int w = counts[-u-1]++;*/...INVALID 
PROCESSING MUTANT: 115:         if (map[w]) { ansd[i]=map[w]; continue; }  ==>          if (map[w]) { ansd[i]=map[w]; continue; }
        break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.568.c] 
PROCESSING MUTANT: 115:         if (map[w]) { ansd[i]=map[w]; continue; }  ==>          if (map[w]) { ansd[i]=map[w]; continue; }
        continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.569.c] 
PROCESSING MUTANT: 115:         if (map[w]) { ansd[i]=map[w]; continue; }  ==>          /*if (map[w]) { ansd[i]=map[w]; continue; }*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.570.c] 
PROCESSING MUTANT: 115:         if (map[w]) { ansd[i]=map[w]; continue; }  ==>          if (!(map[w])) { ansd[i]=map[w]; continue; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.571.c] 
PROCESSING MUTANT: 115:         if (map[w]) { ansd[i]=map[w]; continue; }  ==>          if (0==1) { ansd[i]=map[w]; continue; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.572.c] 
PROCESSING MUTANT: 115:         if (map[w]) { ansd[i]=map[w]; continue; }  ==>          if (1==1) { ansd[i]=map[w]; continue; }...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.573.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[i],1); // w falls on ending 0 marker: dups used up; any more dups should return nomatch...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.574.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[i],0); // w falls on ending 1 marker: dups used up; any more dups should return nomatch...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.575.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[i],-1); // w falls on ending 0 marker: dups used up; any more dups should return nomatch...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.576.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[i],0); // w falls on ending -1 marker: dups used up; any more dups should return nomatch...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.577.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[i],(0+1)); // w falls on ending 0 marker: dups used up; any more dups should return nomatch...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.578.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[i],0); // w falls on ending (0+1) marker: dups used up; any more dups should return nomatch...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.579.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[i],(0-1)); // w falls on ending 0 marker: dups used up; any more dups should return nomatch...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.580.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[i],0); // w falls on ending (0-1) marker: dups used up; any more dups should return nomatch...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.581.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch
        break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.582.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch
        continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.583.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(0,xd[i]); // w falls on ending 0 marker: dups used up; any more dups should return nomatch...INVALID 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch
,i]...INVALID 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          SET_TRUELENGTH(xd[i],0); // w falls on begining 0 marker: dups used up; any more dups should return nomatch...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.584.c] 
PROCESSING MUTANT: 116:         SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch  ==>          /*SET_TRUELENGTH(xd[i],0); // w falls on ending 0 marker: dups used up; any more dups should return nomatch*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.585.c] 
LINE 117:         // we still need the 0-setting loop at the end of this function because often there will be some values in table that are not matched to at all. APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 118:       }  ==>        }
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.586.c] 
PROCESSING MUTANT: 118:       }  ==>        }
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.587.c] 
PROCESSING MUTANT: 119:       ansd[i] = nomatch;  ==>        ansd[i] = nomatch;
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.588.c] 
PROCESSING MUTANT: 119:       ansd[i] = nomatch;  ==>        ansd[i] = nomatch;
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.589.c] 
PROCESSING MUTANT: 119:       ansd[i] = nomatch;  ==>        /*ansd[i] = nomatch;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.590.c] 
PROCESSING MUTANT: 120:     }  ==>      }
    break;...INVALID 
PROCESSING MUTANT: 120:     }  ==>      }
    continue;...INVALID 
PROCESSING MUTANT: 121:     free(counts);  ==>      free(counts);
    break;...INVALID 
PROCESSING MUTANT: 121:     free(counts);  ==>      free(counts);
    continue;...INVALID 
PROCESSING MUTANT: 121:     free(counts);  ==>      /*free(counts);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.591.c] 
PROCESSING MUTANT: 122:     free(map);  ==>      free(map);
    break;...INVALID 
PROCESSING MUTANT: 122:     free(map);  ==>      free(map);
    continue;...INVALID 
PROCESSING MUTANT: 122:     free(map);  ==>      /*free(map);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.592.c] 
PROCESSING MUTANT: 123:   } else if (chin) {  ==>    } else if (chin) {
  break;...INVALID 
PROCESSING MUTANT: 123:   } else if (chin) {  ==>    } else if (chin) {
  continue;...INVALID 
PROCESSING MUTANT: 123:   } else if (chin) {  ==>    /*} else if (chin) {*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.593.c] 
PROCESSING MUTANT: 123:   } else if (chin) {  ==>    } else if (!(chin)) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.594.c] 
PROCESSING MUTANT: 123:   } else if (chin) {  ==>    } else if (0==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.595.c] 
PROCESSING MUTANT: 123:   } else if (chin) {  ==>    } else if (1==1) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.596.c] 
PROCESSING MUTANT: 123:   } else if (chin) {  ==>    }  if (chin) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.597.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i-+) {...INVALID 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i+-) {...INVALID 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i*+) {...INVALID 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i+*) {...INVALID 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i/+) {...INVALID 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i+/) {...INVALID 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i%+) {...INVALID 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i+%) {...INVALID 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i>xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.598.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i==xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.599.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<=xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.600.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i>=xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.601.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i!=xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.602.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i--) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.603.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=1; i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.604.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=-1; i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.605.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=(0+1); i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.606.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=(0-1); i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.607.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i++) {
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.608.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i++) {
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.609.c] 
PROCESSING MUTANT: 124:     for (int i=0; i<xlen; i++) {  ==>      /*for (int i=0; i<xlen; i++) {*/...INVALID 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        ansd[i] = TRUELENGTH(xd[i])>0;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.610.c] 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        ansd[i] = TRUELENGTH(xd[i])==0;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.611.c] 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        ansd[i] = TRUELENGTH(xd[i])<=0;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.612.c] 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        ansd[i] = TRUELENGTH(xd[i])>=0;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.613.c] 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        ansd[i] = TRUELENGTH(xd[i])!=0;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.614.c] 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        ansd[i] = TRUELENGTH(xd[i])<1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.615.c] 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        ansd[i] = TRUELENGTH(xd[i])<-1;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.616.c] 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        ansd[i] = TRUELENGTH(xd[i])<(0+1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.617.c] 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        ansd[i] = TRUELENGTH(xd[i])<(0-1);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.618.c] 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        ansd[i] = TRUELENGTH(xd[i])<0;
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.619.c] 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        ansd[i] = TRUELENGTH(xd[i])<0;
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.620.c] 
PROCESSING MUTANT: 125:       ansd[i] = TRUELENGTH(xd[i])<0;  ==>        /*ansd[i] = TRUELENGTH(xd[i])<0;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.621.c] 
PROCESSING MUTANT: 126:     }  ==>      }
    break;...INVALID 
PROCESSING MUTANT: 126:     }  ==>      }
    continue;...INVALID 
PROCESSING MUTANT: 127:   } else {  ==>    } else {
  break;...INVALID 
PROCESSING MUTANT: 127:   } else {  ==>    } else {
  continue;...INVALID 
PROCESSING MUTANT: 127:   } else {  ==>    /*} else {*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.622.c] 
PROCESSING MUTANT: 127:   } else {  ==>    }  {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.623.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i-+) {...INVALID 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i+-) {...INVALID 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i*+) {...INVALID 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i+*) {...INVALID 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i/+) {...INVALID 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i+/) {...INVALID 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i%+) {...INVALID 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i+%) {...INVALID 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i>xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.624.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i==xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.625.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<=xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.626.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i>=xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.627.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i!=xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.628.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i--) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.629.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=1; i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.630.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=-1; i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.631.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=(0+1); i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.632.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=(0-1); i<xlen; i++) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.633.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i++) {
    break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.634.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      for (int i=0; i<xlen; i++) {
    continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.635.c] 
PROCESSING MUTANT: 128:     for (int i=0; i<xlen; i++) {  ==>      /*for (int i=0; i<xlen; i++) {*/...INVALID 
PROCESSING MUTANT: 129:       const int m = TRUELENGTH(xd[i]);  ==>        const int m = TRUELENGTH(xd[i]);
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.636.c] 
PROCESSING MUTANT: 129:       const int m = TRUELENGTH(xd[i]);  ==>        const int m = TRUELENGTH(xd[i]);
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.637.c] 
PROCESSING MUTANT: 129:       const int m = TRUELENGTH(xd[i]);  ==>        /*const int m = TRUELENGTH(xd[i]);*/...INVALID 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<0) ? +m : nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.638.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<0) ? *m : nomatch;...INVALID 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<0) ? /m : nomatch;...INVALID 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<0) ? %m : nomatch;...INVALID 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m>0) ? -m : nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.639.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m==0) ? -m : nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.640.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<=0) ? -m : nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.641.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m>=0) ? -m : nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.642.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m!=0) ? -m : nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.643.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<0) ? m : nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.644.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<1) ? -m : nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.645.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<-1) ? -m : nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.646.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<(0+1)) ? -m : nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.647.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<(0-1)) ? -m : nomatch;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.648.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<0) ? -m : nomatch;
      break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.649.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        ansd[i] = (m<0) ? -m : nomatch;
      continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.650.c] 
PROCESSING MUTANT: 130:       ansd[i] = (m<0) ? -m : nomatch;  ==>        /*ansd[i] = (m<0) ? -m : nomatch;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.651.c] 
PROCESSING MUTANT: 131:     }  ==>      }
    break;...INVALID 
PROCESSING MUTANT: 131:     }  ==>      }
    continue;...INVALID 
PROCESSING MUTANT: 132:   }  ==>    }
  break;...INVALID 
PROCESSING MUTANT: 132:   }  ==>    }
  continue;...INVALID 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<tablelen; i-+)...INVALID 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<tablelen; i+-)...INVALID 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<tablelen; i*+)...INVALID 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<tablelen; i+*)...INVALID 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<tablelen; i/+)...INVALID 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<tablelen; i+/)...INVALID 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<tablelen; i%+)...INVALID 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<tablelen; i+%)...INVALID 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i>tablelen; i++)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.652.c] 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i==tablelen; i++)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.653.c] 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<=tablelen; i++)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.654.c] 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i>=tablelen; i++)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.655.c] 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i!=tablelen; i++)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.656.c] 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<tablelen; i--)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.657.c] 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=1; i<tablelen; i++)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.658.c] 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=-1; i<tablelen; i++)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.659.c] 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=(0+1); i<tablelen; i++)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.660.c] 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=(0-1); i<tablelen; i++)...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.661.c] 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<tablelen; i++)
  break;...INVALID 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    for (int i=0; i<tablelen; i++)
  continue;...INVALID 
PROCESSING MUTANT: 133:   for (int i=0; i<tablelen; i++)  ==>    /*for (int i=0; i<tablelen; i++)*/...INVALID 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the +i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.662.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the *i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.663.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the /i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.664.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the %i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.665.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.666.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 1);  // reinstate 0 rather than leave the -i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.667.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 0);  // reinstate 1 rather than leave the -i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.668.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], -1);  // reinstate 0 rather than leave the -i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.669.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 0);  // reinstate -1 rather than leave the -i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.670.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], (0+1));  // reinstate 0 rather than leave the -i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.671.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 0);  // reinstate (0+1) rather than leave the -i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.672.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], (0-1));  // reinstate 0 rather than leave the -i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.673.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 0);  // reinstate (0-1) rather than leave the -i-1...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.674.c] 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1
    break;...INVALID 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1
    continue;...INVALID 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH( 0,td[i]);  // reinstate 0 rather than leave the -i-1...INVALID 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      SET_TRUELENGTH(td[ 0);  // reinstate 0 rather than leave the -i-1
,i]...INVALID 
PROCESSING MUTANT: 134:     SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1  ==>      /*SET_TRUELENGTH(td[i], 0);  // reinstate 0 rather than leave the -i-1*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.675.c] 
PROCESSING MUTANT: 135:   savetl_end();  ==>    savetl_end();
  break;...INVALID 
PROCESSING MUTANT: 135:   savetl_end();  ==>    savetl_end();
  continue;...INVALID 
PROCESSING MUTANT: 135:   savetl_end();  ==>    savetl_begin();...INVALID 
PROCESSING MUTANT: 135:   savetl_end();  ==>    /*savetl_end();*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.676.c] 
PROCESSING MUTANT: 136:   UNPROTECT(nprotect);  // ans, xd, td  ==>    UNPROTECT(nprotect);  // ans, xd, td
  break;...INVALID 
PROCESSING MUTANT: 136:   UNPROTECT(nprotect);  // ans, xd, td  ==>    UNPROTECT(nprotect);  // ans, xd, td
  continue;...INVALID 
PROCESSING MUTANT: 136:   UNPROTECT(nprotect);  // ans, xd, td  ==>    UNPROTECT(nprotect);  // ans, td
, xd...INVALID 
PROCESSING MUTANT: 136:   UNPROTECT(nprotect);  // ans, xd, td  ==>    UNPROTECT( xd,nprotect);  // ans, td...INVALID 
PROCESSING MUTANT: 136:   UNPROTECT(nprotect);  // ans, xd, td  ==>    /*UNPROTECT(nprotect);  // ans, xd, td*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.677.c] 
PROCESSING MUTANT: 137:   return ans;  ==>    return ans;
  break;...INVALID 
PROCESSING MUTANT: 137:   return ans;  ==>    return ans;
  continue;...INVALID 
PROCESSING MUTANT: 137:   return ans;  ==>    /*return ans;*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.678.c] 
PROCESSING MUTANT: 138: }  ==>  }
break;...INVALID 
PROCESSING MUTANT: 138: }  ==>  }
continue;...INVALID 
PROCESSING MUTANT: 141: SEXP chmatch(SEXP x, SEXP table, int nomatch) {  // chin=  chmatchdup=  ==>  SEXP chmatch(SEXP x, SEXP table, int nomatch) {  // chin=  chmatchdup=
break;...INVALID 
PROCESSING MUTANT: 141: SEXP chmatch(SEXP x, SEXP table, int nomatch) {  // chin=  chmatchdup=  ==>  SEXP chmatch(SEXP x, SEXP table, int nomatch) {  // chin=  chmatchdup=
continue;...INVALID 
PROCESSING MUTANT: 141: SEXP chmatch(SEXP x, SEXP table, int nomatch) {  // chin=  chmatchdup=  ==>  SEXP chmatch(SEXP x, int nomatch, SEXP table) {  // chin=  chmatchdup=...INVALID 
PROCESSING MUTANT: 141: SEXP chmatch(SEXP x, SEXP table, int nomatch) {  // chin=  chmatchdup=  ==>  SEXP chmatch( SEXP table,SEXP x, int nomatch) {  // chin=  chmatchdup=...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.679.c] 
PROCESSING MUTANT: 141: SEXP chmatch(SEXP x, SEXP table, int nomatch) {  // chin=  chmatchdup=  ==>  /*SEXP chmatch(SEXP x, SEXP table, int nomatch) {  // chin=  chmatchdup=*/...INVALID 
PROCESSING MUTANT: 142:   return chmatchMain(x, table, nomatch,             false, false);  ==>    return chmatchMain(x, table, nomatch,             false, false);
  break;...INVALID 
PROCESSING MUTANT: 142:   return chmatchMain(x, table, nomatch,             false, false);  ==>    return chmatchMain(x, table, nomatch,             false, false);
  continue;...INVALID 
PROCESSING MUTANT: 142:   return chmatchMain(x, table, nomatch,             false, false);  ==>    return chmatchMain(x, nomatch, table,             false, false);...INVALID 
PROCESSING MUTANT: 142:   return chmatchMain(x, table, nomatch,             false, false);  ==>    return chmatchMain(x, table,             false, nomatch, false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.680.c] 
PROCESSING MUTANT: 142:   return chmatchMain(x, table, nomatch,             false, false);  ==>    return chmatchMain(x, table, nomatch, false,             false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.681.c] 
PROCESSING MUTANT: 142:   return chmatchMain(x, table, nomatch,             false, false);  ==>    return chmatchMain( table,x, nomatch,             false, false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.682.c] 
PROCESSING MUTANT: 142:   return chmatchMain(x, table, nomatch,             false, false);  ==>    /*return chmatchMain(x, table, nomatch,             false, false);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.683.c] 
PROCESSING MUTANT: 143: }  ==>  }
break;...INVALID 
PROCESSING MUTANT: 143: }  ==>  }
continue;...INVALID 
PROCESSING MUTANT: 144: SEXP chin(SEXP x, SEXP table) {  ==>  SEXP chin(SEXP x, SEXP table) {
break;...INVALID 
PROCESSING MUTANT: 144: SEXP chin(SEXP x, SEXP table) {  ==>  SEXP chin(SEXP x, SEXP table) {
continue;...INVALID 
PROCESSING MUTANT: 144: SEXP chin(SEXP x, SEXP table) {  ==>  SEXP chin( SEXP table,SEXP x) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.684.c] 
PROCESSING MUTANT: 144: SEXP chin(SEXP x, SEXP table) {  ==>  /*SEXP chin(SEXP x, SEXP table) {*/...INVALID 
PROCESSING MUTANT: 145:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, 1,                   true,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.685.c] 
PROCESSING MUTANT: 145:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, -1,                   true,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.686.c] 
PROCESSING MUTANT: 145:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, (0+1),                   true,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.687.c] 
PROCESSING MUTANT: 145:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, (0-1),                   true,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.688.c] 
PROCESSING MUTANT: 145:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, 0,                   true,  false);
  break;...INVALID 
PROCESSING MUTANT: 145:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, 0,                   true,  false);
  continue;...INVALID 
PROCESSING MUTANT: 145:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, 0, table,                   true,  false);...INVALID 
PROCESSING MUTANT: 145:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table,                   true, 0,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.689.c] 
PROCESSING MUTANT: 145:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, 0,  false,                   true);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.690.c] 
PROCESSING MUTANT: 145:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain( table,x, 0,                   true,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.691.c] 
PROCESSING MUTANT: 145:   return chmatchMain(x, table, 0,                   true,  false);  ==>    /*return chmatchMain(x, table, 0,                   true,  false);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.692.c] 
PROCESSING MUTANT: 146: }  ==>  }
break;...INVALID 
PROCESSING MUTANT: 146: }  ==>  }
continue;...INVALID 
PROCESSING MUTANT: 149: SEXP chmatch_R(SEXP x, SEXP table, SEXP nomatch) {  ==>  SEXP chmatch_R(SEXP x, SEXP table, SEXP nomatch) {
break;...INVALID 
PROCESSING MUTANT: 149: SEXP chmatch_R(SEXP x, SEXP table, SEXP nomatch) {  ==>  SEXP chmatch_R(SEXP x, SEXP table, SEXP nomatch) {
continue;...INVALID 
PROCESSING MUTANT: 149: SEXP chmatch_R(SEXP x, SEXP table, SEXP nomatch) {  ==>  SEXP chmatch_R(SEXP x, SEXP nomatch, SEXP table) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.693.c] 
PROCESSING MUTANT: 149: SEXP chmatch_R(SEXP x, SEXP table, SEXP nomatch) {  ==>  SEXP chmatch_R( SEXP table,SEXP x, SEXP nomatch) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.694.c] 
PROCESSING MUTANT: 149: SEXP chmatch_R(SEXP x, SEXP table, SEXP nomatch) {  ==>  /*SEXP chmatch_R(SEXP x, SEXP table, SEXP nomatch) {*/...INVALID 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[1], false, false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.695.c] 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[-1], false, false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.696.c] 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[(0+1)], false, false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.697.c] 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[(0-1)], false, false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.698.c] 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);
  break;...INVALID 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);
  continue;...INVALID 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    return chmatchMain(x, INTEGER(nomatch, table)[0], false, false);...INVALID 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    return chmatchMain(x, table, false, INTEGER(nomatch)[0], false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.699.c] 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    return chmatchMain( table,x, INTEGER(nomatch)[0], false, false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.700.c] 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    return chmatchMain(x, table, INTEGER( false,nomatch)[0], false);...INVALID 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[ false,0], false);...INVALID 
PROCESSING MUTANT: 150:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);  ==>    /*return chmatchMain(x, table, INTEGER(nomatch)[0], false, false);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.701.c] 
PROCESSING MUTANT: 151: }  ==>  }
break;...INVALID 
PROCESSING MUTANT: 151: }  ==>  }
continue;...INVALID 
PROCESSING MUTANT: 152: SEXP chin_R(SEXP x, SEXP table) {  ==>  SEXP chin_R(SEXP x, SEXP table) {
break;...INVALID 
PROCESSING MUTANT: 152: SEXP chin_R(SEXP x, SEXP table) {  ==>  SEXP chin_R(SEXP x, SEXP table) {
continue;...INVALID 
PROCESSING MUTANT: 152: SEXP chin_R(SEXP x, SEXP table) {  ==>  SEXP chin_R( SEXP table,SEXP x) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.702.c] 
PROCESSING MUTANT: 152: SEXP chin_R(SEXP x, SEXP table) {  ==>  /*SEXP chin_R(SEXP x, SEXP table) {*/...INVALID 
PROCESSING MUTANT: 153:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, 1,                   true,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.703.c] 
PROCESSING MUTANT: 153:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, -1,                   true,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.704.c] 
PROCESSING MUTANT: 153:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, (0+1),                   true,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.705.c] 
PROCESSING MUTANT: 153:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, (0-1),                   true,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.706.c] 
PROCESSING MUTANT: 153:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, 0,                   true,  false);
  break;...INVALID 
PROCESSING MUTANT: 153:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, 0,                   true,  false);
  continue;...INVALID 
PROCESSING MUTANT: 153:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, 0, table,                   true,  false);...INVALID 
PROCESSING MUTANT: 153:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table,                   true, 0,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.707.c] 
PROCESSING MUTANT: 153:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain(x, table, 0,  false,                   true);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.708.c] 
PROCESSING MUTANT: 153:   return chmatchMain(x, table, 0,                   true,  false);  ==>    return chmatchMain( table,x, 0,                   true,  false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.709.c] 
PROCESSING MUTANT: 153:   return chmatchMain(x, table, 0,                   true,  false);  ==>    /*return chmatchMain(x, table, 0,                   true,  false);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.710.c] 
PROCESSING MUTANT: 154: }  ==>  }
break;...INVALID 
PROCESSING MUTANT: 154: }  ==>  }
continue;...INVALID 
PROCESSING MUTANT: 155: SEXP chmatchdup_R(SEXP x, SEXP table, SEXP nomatch) {  ==>  SEXP chmatchdup_R(SEXP x, SEXP table, SEXP nomatch) {
break;...INVALID 
PROCESSING MUTANT: 155: SEXP chmatchdup_R(SEXP x, SEXP table, SEXP nomatch) {  ==>  SEXP chmatchdup_R(SEXP x, SEXP table, SEXP nomatch) {
continue;...INVALID 
PROCESSING MUTANT: 155: SEXP chmatchdup_R(SEXP x, SEXP table, SEXP nomatch) {  ==>  SEXP chmatchdup_R(SEXP x, SEXP nomatch, SEXP table) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.711.c] 
PROCESSING MUTANT: 155: SEXP chmatchdup_R(SEXP x, SEXP table, SEXP nomatch) {  ==>  SEXP chmatchdup_R( SEXP table,SEXP x, SEXP nomatch) {...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.712.c] 
PROCESSING MUTANT: 155: SEXP chmatchdup_R(SEXP x, SEXP table, SEXP nomatch) {  ==>  /*SEXP chmatchdup_R(SEXP x, SEXP table, SEXP nomatch) {*/...INVALID 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[1], false, true);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.713.c] 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[-1], false, true);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.714.c] 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[(0+1)], false, true);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.715.c] 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[(0-1)], false, true);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.716.c] 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);
  break;...INVALID 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);
  continue;...INVALID 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain(x, INTEGER(nomatch, table)[0], false, true);...INVALID 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain(x, table, false, INTEGER(nomatch)[0], true);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.717.c] 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[0], true, false);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.718.c] 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain( table,x, INTEGER(nomatch)[0], false, true);...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.719.c] 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain(x, table, INTEGER( false,nomatch)[0], true);...INVALID 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    return chmatchMain(x, table, INTEGER(nomatch)[ false,0], true);...INVALID 
PROCESSING MUTANT: 156:   return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);  ==>    /*return chmatchMain(x, table, INTEGER(nomatch)[0], false, true);*/...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.720.c] 
PROCESSING MUTANT: 157: }  ==>  }
break;...INVALID 
PROCESSING MUTANT: 157: }  ==>  }
continue;...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(159, '/*\n')
PROCESSING MUTANT: 159: /*  ==>  /+...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(159, '/*\n')
PROCESSING MUTANT: 159: /*  ==>  /-...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(159, '/*\n')
PROCESSING MUTANT: 159: /*  ==>  //...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(159, '/*\n')
PROCESSING MUTANT: 159: /*  ==>  /%...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(159, '/*\n')
PROCESSING MUTANT: 159: /*  ==>  /*
break;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.721.c] 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(159, '/*\n')
PROCESSING MUTANT: 159: /*  ==>  /*
continue;...VALID [written to /scratch/th798/mutation-testing/data.table/src/chmatch.c/chmatch.mutant.722.c] 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(159, '/*\n')
PROCESSING MUTANT: 159: /*  ==>  /*/**/...INVALID 
LINE 160: ## Benchmark moved here in v1.12.2 from rbindlist.c APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 161: set.seed(45L) APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 162: x <- sample(letters, 1e6, TRUE) APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 163: y <- sample(letters, 1e7, TRUE) APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 164: system.time(ans0 <- base::pmatch(x,y,0L))           # over 5 minutes as of R 3.5.3 (March 2019) APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 165: system.time(ans1 <- .Call("Cchmatch2_old", x,y,0L)) # 2.40sec  many years old APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 166: system.time(ans2 <- .Call("Cchmatch2", x,y,0L))     # 0.17sec  as of 1.12.0 and in place for several years before that APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 167: system.time(ans3 <- chmatchdup(x,y,0L))             # 0.09sec  from 1.12.2; but goal wasn't speed rather simplified code; e.g. rbindlist.c down from 960 to 360 lines APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
LINE 168: identical(ans2,ans3)  # test 2000 APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  +/...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  -/...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  //...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  %/...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  */
break;...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  */
continue;...INVALID 
** WARNING: SKIPPING GENERATING IDENTICAL MUTANT **
(169, '*/\n')
PROCESSING MUTANT: 169: */  ==>  /**/*/...INVALID 
723 VALID MUTANTS
564 INVALID MUTANTS
0 REDUNDANT MUTANTS
Valid Percentage: 56.17715617715618%
